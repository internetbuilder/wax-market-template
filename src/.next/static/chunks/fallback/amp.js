// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["amp"],{

/***/ "../node_modules/next/dist/client/dev/amp-dev.js":
/*!*******************************************************!*\
  !*** ../node_modules/next/dist/client/dev/amp-dev.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nvar _eventSourcePolyfill = _interopRequireDefault(__webpack_require__(/*! ./event-source-polyfill */ \"../node_modules/next/dist/client/dev/event-source-polyfill.js\"));\n\nvar _eventsource = __webpack_require__(/*! ./error-overlay/eventsource */ \"../node_modules/next/dist/client/dev/error-overlay/eventsource.js\");\n\nvar _onDemandEntriesUtils = __webpack_require__(/*! ./on-demand-entries-utils */ \"../node_modules/next/dist/client/dev/on-demand-entries-utils.js\");\n\nvar _fouc = __webpack_require__(/*! ./fouc */ \"../node_modules/next/dist/client/dev/fouc.js\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nif (!window.EventSource) {\n  window.EventSource = _eventSourcePolyfill.default;\n}\n\nconst data = JSON.parse(document.getElementById('__NEXT_DATA__').textContent);\nlet {\n  assetPrefix,\n  page\n} = data;\nassetPrefix = assetPrefix || '';\nlet mostRecentHash = null;\n/* eslint-disable-next-line */\n\nlet curHash = __webpack_require__.h();\nconst hotUpdatePath = assetPrefix + (assetPrefix.endsWith('/') ? '' : '/') + '_next/static/webpack/'; // Is there a newer version of this code available?\n\nfunction isUpdateAvailable() {\n  // __webpack_hash__ is the hash of the current compilation.\n  // It's a global variable injected by Webpack.\n\n  /* eslint-disable-next-line */\n  return mostRecentHash !== __webpack_require__.h();\n} // Webpack disallows updates in other states.\n\n\nfunction canApplyUpdates() {\n  return module.hot.status() === 'idle';\n}\n\nfunction _tryApplyUpdates() {\n  _tryApplyUpdates = // This function reads code updates on the fly and hard\n  // reloads the page when it has changed.\n  _asyncToGenerator(function* () {\n    if (!isUpdateAvailable() || !canApplyUpdates()) {\n      return;\n    }\n\n    try {\n      const res = yield fetch(typeof __webpack_require__.j !== 'undefined' ? `${hotUpdatePath}${curHash}.${__webpack_require__.j}.hot-update.json` : `${hotUpdatePath}${curHash}.hot-update.json`);\n      const jsonData = yield res.json();\n      const curPage = page === '/' ? 'index' : page; // webpack 5 uses an array instead\n\n      const pageUpdated = (Array.isArray(jsonData.c) ? jsonData.c : Object.keys(jsonData.c)).some(mod => {\n        return mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`) !== -1 || mod.indexOf(`pages${curPage.substr(0, 1) === '/' ? curPage : `/${curPage}`}`.replace(/\\//g, '\\\\')) !== -1;\n      });\n\n      if (pageUpdated) {\n        document.location.reload(true);\n      } else {\n        curHash = mostRecentHash;\n      }\n    } catch (err) {\n      console.error('Error occurred checking for update', err);\n      document.location.reload(true);\n    }\n  });\n  return _tryApplyUpdates.apply(this, arguments);\n}\n\nfunction tryApplyUpdates() {\n  return _tryApplyUpdates.apply(this, arguments);\n}\n\n(0, _eventsource).addMessageListener(event => {\n  if (event.data === '\\uD83D\\uDC93') {\n    return;\n  }\n\n  try {\n    const message = JSON.parse(event.data);\n\n    if (message.action === 'sync' || message.action === 'built') {\n      if (!message.hash) {\n        return;\n      }\n\n      mostRecentHash = message.hash;\n      tryApplyUpdates();\n    } else if (message.action === 'reloadPage') {\n      document.location.reload(true);\n    }\n  } catch (ex) {\n    console.warn('Invalid HMR message: ' + event.data + '\\n' + ex);\n  }\n});\n(0, _onDemandEntriesUtils).setupPing(assetPrefix, () => page);\n(0, _fouc).displayContent();\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/next/dist/client/dev/amp-dev.js\n");

/***/ }),

/***/ "../node_modules/next/dist/client/dev/error-overlay/eventsource.js":
/*!*************************************************************************!*\
  !*** ../node_modules/next/dist/client/dev/error-overlay/eventsource.js ***!
  \*************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.addMessageListener = addMessageListener;\nexports.getEventSourceWrapper = getEventSourceWrapper;\nconst eventCallbacks = [];\n\nfunction EventSourceWrapper(options) {\n  var source;\n  var lastActivity = new Date();\n  var listeners = [];\n\n  if (!options.timeout) {\n    options.timeout = 20 * 1000;\n  }\n\n  init();\n  var timer = setInterval(function () {\n    if (new Date() - lastActivity > options.timeout) {\n      handleDisconnect();\n    }\n  }, options.timeout / 2);\n\n  function init() {\n    source = new window.EventSource(options.path);\n    source.onopen = handleOnline;\n    source.onerror = handleDisconnect;\n    source.onmessage = handleMessage;\n  }\n\n  function handleOnline() {\n    if (options.log) console.log('[HMR] connected');\n    lastActivity = new Date();\n  }\n\n  function handleMessage(event) {\n    lastActivity = new Date();\n\n    for (var i = 0; i < listeners.length; i++) {\n      listeners[i](event);\n    }\n\n    eventCallbacks.forEach(cb => {\n      if (!cb.unfiltered && event.data.indexOf('action') === -1) return;\n      cb(event);\n    });\n  }\n\n  function handleDisconnect() {\n    clearInterval(timer);\n    source.close();\n    setTimeout(init, options.timeout);\n  }\n\n  return {\n    close: () => {\n      clearInterval(timer);\n      source.close();\n    },\n    addMessageListener: function (fn) {\n      listeners.push(fn);\n    }\n  };\n}\n\n_c = EventSourceWrapper;\n\nfunction addMessageListener(cb) {\n  eventCallbacks.push(cb);\n}\n\nfunction getEventSourceWrapper(options) {\n  return EventSourceWrapper(options);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"EventSourceWrapper\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L2Vycm9yLW92ZXJsYXkvZXZlbnRzb3VyY2UuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCwwQkFBQSxHQUE2QkUsa0JBQTdCO0FBQ0FGLDZCQUFBLEdBQWdDRyxxQkFBaEM7QUFDQSxNQUFNQyxjQUFjLEdBQUcsRUFBdkI7O0FBQ0EsU0FBU0Msa0JBQVQsQ0FBNEJDLE9BQTVCLEVBQXFDO0FBQ2pDLE1BQUlDLE1BQUo7QUFDQSxNQUFJQyxZQUFZLEdBQUcsSUFBSUMsSUFBSixFQUFuQjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxFQUFoQjs7QUFDQSxNQUFJLENBQUNKLE9BQU8sQ0FBQ0ssT0FBYixFQUFzQjtBQUNsQkwsSUFBQUEsT0FBTyxDQUFDSyxPQUFSLEdBQWtCLEtBQUssSUFBdkI7QUFDSDs7QUFDREMsRUFBQUEsSUFBSTtBQUNKLE1BQUlDLEtBQUssR0FBR0MsV0FBVyxDQUFDLFlBQVc7QUFDL0IsUUFBSSxJQUFJTCxJQUFKLEtBQWFELFlBQWIsR0FBNEJGLE9BQU8sQ0FBQ0ssT0FBeEMsRUFBaUQ7QUFDN0NJLE1BQUFBLGdCQUFnQjtBQUNuQjtBQUNKLEdBSnNCLEVBSXBCVCxPQUFPLENBQUNLLE9BQVIsR0FBa0IsQ0FKRSxDQUF2Qjs7QUFLQSxXQUFTQyxJQUFULEdBQWdCO0FBQ1pMLElBQUFBLE1BQU0sR0FBRyxJQUFJUyxNQUFNLENBQUNDLFdBQVgsQ0FBdUJYLE9BQU8sQ0FBQ1ksSUFBL0IsQ0FBVDtBQUNBWCxJQUFBQSxNQUFNLENBQUNZLE1BQVAsR0FBZ0JDLFlBQWhCO0FBQ0FiLElBQUFBLE1BQU0sQ0FBQ2MsT0FBUCxHQUFpQk4sZ0JBQWpCO0FBQ0FSLElBQUFBLE1BQU0sQ0FBQ2UsU0FBUCxHQUFtQkMsYUFBbkI7QUFDSDs7QUFDRCxXQUFTSCxZQUFULEdBQXdCO0FBQ3BCLFFBQUlkLE9BQU8sQ0FBQ2tCLEdBQVosRUFBaUJDLE9BQU8sQ0FBQ0QsR0FBUixDQUFZLGlCQUFaO0FBQ2pCaEIsSUFBQUEsWUFBWSxHQUFHLElBQUlDLElBQUosRUFBZjtBQUNIOztBQUNELFdBQVNjLGFBQVQsQ0FBdUJHLEtBQXZCLEVBQThCO0FBQzFCbEIsSUFBQUEsWUFBWSxHQUFHLElBQUlDLElBQUosRUFBZjs7QUFDQSxTQUFJLElBQUlrQixDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdqQixTQUFTLENBQUNrQixNQUE3QixFQUFxQ0QsQ0FBQyxFQUF0QyxFQUF5QztBQUNyQ2pCLE1BQUFBLFNBQVMsQ0FBQ2lCLENBQUQsQ0FBVCxDQUFhRCxLQUFiO0FBQ0g7O0FBQ0R0QixJQUFBQSxjQUFjLENBQUN5QixPQUFmLENBQXdCQyxFQUFELElBQU07QUFDekIsVUFBSSxDQUFDQSxFQUFFLENBQUNDLFVBQUosSUFBa0JMLEtBQUssQ0FBQ00sSUFBTixDQUFXQyxPQUFYLENBQW1CLFFBQW5CLE1BQWlDLENBQUMsQ0FBeEQsRUFBMkQ7QUFDM0RILE1BQUFBLEVBQUUsQ0FBQ0osS0FBRCxDQUFGO0FBQ0gsS0FIRDtBQUlIOztBQUNELFdBQVNYLGdCQUFULEdBQTRCO0FBQ3hCbUIsSUFBQUEsYUFBYSxDQUFDckIsS0FBRCxDQUFiO0FBQ0FOLElBQUFBLE1BQU0sQ0FBQzRCLEtBQVA7QUFDQUMsSUFBQUEsVUFBVSxDQUFDeEIsSUFBRCxFQUFPTixPQUFPLENBQUNLLE9BQWYsQ0FBVjtBQUNIOztBQUNELFNBQU87QUFDSHdCLElBQUFBLEtBQUssRUFBRSxNQUFJO0FBQ1BELE1BQUFBLGFBQWEsQ0FBQ3JCLEtBQUQsQ0FBYjtBQUNBTixNQUFBQSxNQUFNLENBQUM0QixLQUFQO0FBQ0gsS0FKRTtBQUtIakMsSUFBQUEsa0JBQWtCLEVBQUUsVUFBU21DLEVBQVQsRUFBYTtBQUM3QjNCLE1BQUFBLFNBQVMsQ0FBQzRCLElBQVYsQ0FBZUQsRUFBZjtBQUNIO0FBUEUsR0FBUDtBQVNIOztLQS9DUWhDOztBQWdEVCxTQUFTSCxrQkFBVCxDQUE0QjRCLEVBQTVCLEVBQWdDO0FBQzVCMUIsRUFBQUEsY0FBYyxDQUFDa0MsSUFBZixDQUFvQlIsRUFBcEI7QUFDSDs7QUFDRCxTQUFTM0IscUJBQVQsQ0FBK0JHLE9BQS9CLEVBQXdDO0FBQ3BDLFNBQU9ELGtCQUFrQixDQUFDQyxPQUFELENBQXpCO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2Rldi9lcnJvci1vdmVybGF5L2V2ZW50c291cmNlLmpzPzc4MGEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmFkZE1lc3NhZ2VMaXN0ZW5lciA9IGFkZE1lc3NhZ2VMaXN0ZW5lcjtcbmV4cG9ydHMuZ2V0RXZlbnRTb3VyY2VXcmFwcGVyID0gZ2V0RXZlbnRTb3VyY2VXcmFwcGVyO1xuY29uc3QgZXZlbnRDYWxsYmFja3MgPSBbXTtcbmZ1bmN0aW9uIEV2ZW50U291cmNlV3JhcHBlcihvcHRpb25zKSB7XG4gICAgdmFyIHNvdXJjZTtcbiAgICB2YXIgbGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcbiAgICB2YXIgbGlzdGVuZXJzID0gW107XG4gICAgaWYgKCFvcHRpb25zLnRpbWVvdXQpIHtcbiAgICAgICAgb3B0aW9ucy50aW1lb3V0ID0gMjAgKiAxMDAwO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChuZXcgRGF0ZSgpIC0gbGFzdEFjdGl2aXR5ID4gb3B0aW9ucy50aW1lb3V0KSB7XG4gICAgICAgICAgICBoYW5kbGVEaXNjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9LCBvcHRpb25zLnRpbWVvdXQgLyAyKTtcbiAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBzb3VyY2UgPSBuZXcgd2luZG93LkV2ZW50U291cmNlKG9wdGlvbnMucGF0aCk7XG4gICAgICAgIHNvdXJjZS5vbm9wZW4gPSBoYW5kbGVPbmxpbmU7XG4gICAgICAgIHNvdXJjZS5vbmVycm9yID0gaGFuZGxlRGlzY29ubmVjdDtcbiAgICAgICAgc291cmNlLm9ubWVzc2FnZSA9IGhhbmRsZU1lc3NhZ2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU9ubGluZSgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubG9nKSBjb25zb2xlLmxvZygnW0hNUl0gY29ubmVjdGVkJyk7XG4gICAgICAgIGxhc3RBY3Rpdml0eSA9IG5ldyBEYXRlKCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZU1lc3NhZ2UoZXZlbnQpIHtcbiAgICAgICAgbGFzdEFjdGl2aXR5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0oZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGV2ZW50Q2FsbGJhY2tzLmZvckVhY2goKGNiKT0+e1xuICAgICAgICAgICAgaWYgKCFjYi51bmZpbHRlcmVkICYmIGV2ZW50LmRhdGEuaW5kZXhPZignYWN0aW9uJykgPT09IC0xKSByZXR1cm47XG4gICAgICAgICAgICBjYihldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVEaXNjb25uZWN0KCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgc291cmNlLmNsb3NlKCk7XG4gICAgICAgIHNldFRpbWVvdXQoaW5pdCwgb3B0aW9ucy50aW1lb3V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgY2xvc2U6ICgpPT57XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgICAgIHNvdXJjZS5jbG9zZSgpO1xuICAgICAgICB9LFxuICAgICAgICBhZGRNZXNzYWdlTGlzdGVuZXI6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkTWVzc2FnZUxpc3RlbmVyKGNiKSB7XG4gICAgZXZlbnRDYWxsYmFja3MucHVzaChjYik7XG59XG5mdW5jdGlvbiBnZXRFdmVudFNvdXJjZVdyYXBwZXIob3B0aW9ucykge1xuICAgIHJldHVybiBFdmVudFNvdXJjZVdyYXBwZXIob3B0aW9ucyk7XG59XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50c291cmNlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFkZE1lc3NhZ2VMaXN0ZW5lciIsImdldEV2ZW50U291cmNlV3JhcHBlciIsImV2ZW50Q2FsbGJhY2tzIiwiRXZlbnRTb3VyY2VXcmFwcGVyIiwib3B0aW9ucyIsInNvdXJjZSIsImxhc3RBY3Rpdml0eSIsIkRhdGUiLCJsaXN0ZW5lcnMiLCJ0aW1lb3V0IiwiaW5pdCIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJoYW5kbGVEaXNjb25uZWN0Iiwid2luZG93IiwiRXZlbnRTb3VyY2UiLCJwYXRoIiwib25vcGVuIiwiaGFuZGxlT25saW5lIiwib25lcnJvciIsIm9ubWVzc2FnZSIsImhhbmRsZU1lc3NhZ2UiLCJsb2ciLCJjb25zb2xlIiwiZXZlbnQiLCJpIiwibGVuZ3RoIiwiZm9yRWFjaCIsImNiIiwidW5maWx0ZXJlZCIsImRhdGEiLCJpbmRleE9mIiwiY2xlYXJJbnRlcnZhbCIsImNsb3NlIiwic2V0VGltZW91dCIsImZuIiwicHVzaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/next/dist/client/dev/error-overlay/eventsource.js\n");

/***/ }),

/***/ "../node_modules/next/dist/client/dev/event-source-polyfill.js":
/*!*********************************************************************!*\
  !*** ../node_modules/next/dist/client/dev/event-source-polyfill.js ***!
  \*********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n/* eslint-disable */\n// Improved version of https://github.com/Yaffle/EventSource/\n// Available under MIT License (MIT)\n// Only tries to support IE11 and nothing below\n\nvar document = window.document;\nvar Response1 = window.Response;\nvar TextDecoder1 = window.TextDecoder;\nvar TextEncoder1 = window.TextEncoder;\nvar AbortController1 = window.AbortController;\n\nif (AbortController1 == undefined) {\n  AbortController1 = function () {\n    this.signal = null;\n\n    this.abort = function () {};\n  };\n}\n\nfunction TextDecoderPolyfill() {\n  this.bitsNeeded = 0;\n  this.codePoint = 0;\n}\n\n_c = TextDecoderPolyfill;\n\nTextDecoderPolyfill.prototype.decode = function (octets) {\n  function valid(codePoint, shift, octetsCount) {\n    if (octetsCount === 1) {\n      return codePoint >= 128 >> shift && codePoint << shift <= 2047;\n    }\n\n    if (octetsCount === 2) {\n      return codePoint >= 2048 >> shift && codePoint << shift <= 55295 || codePoint >= 57344 >> shift && codePoint << shift <= 65535;\n    }\n\n    if (octetsCount === 3) {\n      return codePoint >= 65536 >> shift && codePoint << shift <= 1114111;\n    }\n\n    throw new Error();\n  }\n\n  function octetsCount(bitsNeeded, codePoint) {\n    if (bitsNeeded === 6 * 1) {\n      return codePoint >> 6 > 15 ? 3 : codePoint > 31 ? 2 : 1;\n    }\n\n    if (bitsNeeded === 6 * 2) {\n      return codePoint > 15 ? 3 : 2;\n    }\n\n    if (bitsNeeded === 6 * 3) {\n      return 3;\n    }\n\n    throw new Error();\n  }\n\n  var REPLACER = 65533;\n  var string = '';\n  var bitsNeeded = this.bitsNeeded;\n  var codePoint = this.codePoint;\n\n  for (var i = 0; i < octets.length; i += 1) {\n    var octet = octets[i];\n\n    if (bitsNeeded !== 0) {\n      if (octet < 128 || octet > 191 || !valid(codePoint << 6 | octet & 63, bitsNeeded - 6, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n        string += String.fromCharCode(codePoint);\n      }\n    }\n\n    if (bitsNeeded === 0) {\n      if (octet >= 0 && octet <= 127) {\n        bitsNeeded = 0;\n        codePoint = octet;\n      } else if (octet >= 192 && octet <= 223) {\n        bitsNeeded = 6 * 1;\n        codePoint = octet & 31;\n      } else if (octet >= 224 && octet <= 239) {\n        bitsNeeded = 6 * 2;\n        codePoint = octet & 15;\n      } else if (octet >= 240 && octet <= 247) {\n        bitsNeeded = 6 * 3;\n        codePoint = octet & 7;\n      } else {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n\n      if (bitsNeeded !== 0 && !valid(codePoint, bitsNeeded, octetsCount(bitsNeeded, codePoint))) {\n        bitsNeeded = 0;\n        codePoint = REPLACER;\n      }\n    } else {\n      bitsNeeded -= 6;\n      codePoint = codePoint << 6 | octet & 63;\n    }\n\n    if (bitsNeeded === 0) {\n      if (codePoint <= 65535) {\n        string += String.fromCharCode(codePoint);\n      } else {\n        string += String.fromCharCode(55296 + (codePoint - 65535 - 1 >> 10));\n        string += String.fromCharCode(56320 + (codePoint - 65535 - 1 & 1023));\n      }\n    }\n  }\n\n  this.bitsNeeded = bitsNeeded;\n  this.codePoint = codePoint;\n  return string;\n}; // Firefox < 38 throws an error with stream option\n\n\nvar supportsStreamOption = function () {\n  try {\n    return new TextDecoder1().decode(new TextEncoder1().encode('test'), {\n      stream: true\n    }) === 'test';\n  } catch (error) {\n    console.log(error);\n  }\n\n  return false;\n}; // IE, Edge\n\n\nif (TextDecoder1 == undefined || TextEncoder1 == undefined || !supportsStreamOption()) {\n  TextDecoder1 = TextDecoderPolyfill;\n}\n\nvar k = function () {};\n\nfunction XHRWrapper(xhr) {\n  this.withCredentials = false;\n  this.responseType = '';\n  this.readyState = 0;\n  this.status = 0;\n  this.statusText = '';\n  this.responseText = '';\n  this.onprogress = k;\n  this.onreadystatechange = k;\n  this._contentType = '';\n  this._xhr = xhr;\n  this._sendTimeout = 0;\n  this._abort = k;\n}\n\n_c2 = XHRWrapper;\n\nXHRWrapper.prototype.open = function (method, url) {\n  this._abort(true);\n\n  var that = this;\n  var xhr = this._xhr;\n  var state = 1;\n  var timeout = 0;\n\n  this._abort = function (silent) {\n    if (that._sendTimeout !== 0) {\n      clearTimeout(that._sendTimeout);\n      that._sendTimeout = 0;\n    }\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n      xhr.onload = k;\n      xhr.onerror = k;\n      xhr.onabort = k;\n      xhr.onprogress = k;\n      xhr.onreadystatechange = k; // IE 8 - 9: XDomainRequest#abort() does not fire any event\n      // Opera < 10: XMLHttpRequest#abort() does not fire any event\n\n      xhr.abort();\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      if (!silent) {\n        that.readyState = 4;\n        that.onreadystatechange();\n      }\n    }\n\n    state = 0;\n  };\n\n  var onStart = function () {\n    if (state === 1) {\n      // state = 2;\n      var status = 0;\n      var statusText = '';\n      var contentType = undefined;\n\n      if (!('contentType' in xhr)) {\n        try {\n          status = xhr.status;\n          statusText = xhr.statusText;\n          contentType = xhr.getResponseHeader('Content-Type');\n        } catch (error) {\n          // IE < 10 throws exception for `xhr.status` when xhr.readyState === 2 || xhr.readyState === 3\n          // Opera < 11 throws exception for `xhr.status` when xhr.readyState === 2\n          // https://bugs.webkit.org/show_bug.cgi?id=29121\n          status = 0;\n          statusText = '';\n          contentType = undefined; // Firefox < 14, Chrome ?, Safari ?\n          // https://bugs.webkit.org/show_bug.cgi?id=29658\n          // https://bugs.webkit.org/show_bug.cgi?id=77854\n        }\n      } else {\n        status = 200;\n        statusText = 'OK';\n        contentType = xhr.contentType;\n      }\n\n      if (status !== 0) {\n        state = 2;\n        that.readyState = 2;\n        that.status = status;\n        that.statusText = statusText;\n        that._contentType = contentType;\n        that.onreadystatechange();\n      }\n    }\n  };\n\n  var onProgress = function () {\n    onStart();\n\n    if (state === 2 || state === 3) {\n      state = 3;\n      var responseText = '';\n\n      try {\n        responseText = xhr.responseText;\n      } catch (error) {// IE 8 - 9 with XMLHttpRequest\n      }\n\n      that.readyState = 3;\n      that.responseText = responseText;\n      that.onprogress();\n    }\n  };\n\n  var onFinish = function () {\n    // Firefox 52 fires \"readystatechange\" (xhr.readyState === 4) without final \"readystatechange\" (xhr.readyState === 3)\n    // IE 8 fires \"onload\" without \"onprogress\"\n    onProgress();\n\n    if (state === 1 || state === 2 || state === 3) {\n      state = 4;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      that.readyState = 4;\n      that.onreadystatechange();\n    }\n  };\n\n  var onReadyStateChange = function () {\n    if (xhr != undefined) {\n      // Opera 12\n      if (xhr.readyState === 4) {\n        onFinish();\n      } else if (xhr.readyState === 3) {\n        onProgress();\n      } else if (xhr.readyState === 2) {\n        onStart();\n      }\n    }\n  };\n\n  var onTimeout = function () {\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 500);\n\n    if (xhr.readyState === 3) {\n      onProgress();\n    }\n  }; // XDomainRequest#abort removes onprogress, onerror, onload\n\n\n  xhr.onload = onFinish;\n  xhr.onerror = onFinish; // improper fix to match Firefox behavior, but it is better than just ignore abort\n  // see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n  // https://code.google.com/p/chromium/issues/detail?id=153570\n  // IE 8 fires \"onload\" without \"onprogress\n\n  xhr.onabort = onFinish; // https://bugzilla.mozilla.org/show_bug.cgi?id=736723\n\n  if (!('sendAsBinary' in XMLHttpRequest.prototype) && !('mozAnon' in XMLHttpRequest.prototype)) {\n    xhr.onprogress = onProgress;\n  } // IE 8 - 9 (XMLHTTPRequest)\n  // Opera < 12\n  // Firefox < 3.5\n  // Firefox 3.5 - 3.6 - ? < 9.0\n  // onprogress is not fired sometimes or delayed\n  // see also #64\n\n\n  xhr.onreadystatechange = onReadyStateChange;\n\n  if ('contentType' in xhr) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + 'padding=true';\n  }\n\n  xhr.open(method, url, true);\n\n  if ('readyState' in xhr) {\n    // workaround for Opera 12 issue with \"progress\" events\n    // #91\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, 0);\n  }\n};\n\nXHRWrapper.prototype.abort = function () {\n  this._abort(false);\n};\n\nXHRWrapper.prototype.getResponseHeader = function (name) {\n  return this._contentType;\n};\n\nXHRWrapper.prototype.setRequestHeader = function (name, value) {\n  var xhr = this._xhr;\n\n  if ('setRequestHeader' in xhr) {\n    xhr.setRequestHeader(name, value);\n  }\n};\n\nXHRWrapper.prototype.getAllResponseHeaders = function () {\n  return this._xhr.getAllResponseHeaders != undefined ? this._xhr.getAllResponseHeaders() : '';\n};\n\nXHRWrapper.prototype.send = function () {\n  // loading indicator in Safari < ? (6), Chrome < 14, Firefox\n  if (!('ontimeout' in XMLHttpRequest.prototype) && document != undefined && document.readyState != undefined && document.readyState !== 'complete') {\n    var that = this;\n    that._sendTimeout = setTimeout(function () {\n      that._sendTimeout = 0;\n      that.send();\n    }, 4);\n    return;\n  }\n\n  var xhr = this._xhr; // withCredentials should be set after \"open\" for Safari and Chrome (< 19 ?)\n\n  xhr.withCredentials = this.withCredentials;\n  xhr.responseType = this.responseType;\n\n  try {\n    // xhr.send(); throws \"Not enough arguments\" in Firefox 3.0\n    xhr.send(undefined);\n  } catch (error1) {\n    // Safari 5.1.7, Opera 12\n    throw error1;\n  }\n};\n\nfunction toLowerCase(name) {\n  return name.replace(/[A-Z]/g, function (c) {\n    return String.fromCharCode(c.charCodeAt(0) + 32);\n  });\n}\n\nfunction HeadersPolyfill(all) {\n  // Get headers: implemented according to mozilla's example code: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#Example\n  var map = Object.create(null);\n  var array = all.split('\\r\\n');\n\n  for (var i = 0; i < array.length; i += 1) {\n    var line = array[i];\n    var parts = line.split(': ');\n    var name = parts.shift();\n    var value = parts.join(': ');\n    map[toLowerCase(name)] = value;\n  }\n\n  this._map = map;\n}\n\n_c3 = HeadersPolyfill;\n\nHeadersPolyfill.prototype.get = function (name) {\n  return this._map[toLowerCase(name)];\n};\n\nfunction XHRTransport() {}\n\n_c4 = XHRTransport;\n\nXHRTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers) {\n  xhr.open('GET', url);\n  var offset = 0;\n\n  xhr.onprogress = function () {\n    var responseText = xhr.responseText;\n    var chunk = responseText.slice(offset);\n    offset += chunk.length;\n    onProgressCallback(chunk);\n  };\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 2) {\n      var status = xhr.status;\n      var statusText = xhr.statusText;\n      var contentType = xhr.getResponseHeader('Content-Type');\n      var headers1 = xhr.getAllResponseHeaders();\n      onStartCallback(status, statusText, contentType, new HeadersPolyfill(headers1), function () {\n        xhr.abort();\n      });\n    } else if (xhr.readyState === 4) {\n      onFinishCallback();\n    }\n  };\n\n  xhr.withCredentials = withCredentials;\n  xhr.responseType = 'text';\n\n  for (var name in headers) {\n    if (Object.prototype.hasOwnProperty.call(headers, name)) {\n      xhr.setRequestHeader(name, headers[name]);\n    }\n  }\n\n  xhr.send();\n};\n\nfunction HeadersWrapper(headers2) {\n  this._headers = headers2;\n}\n\n_c5 = HeadersWrapper;\n\nHeadersWrapper.prototype.get = function (name) {\n  return this._headers.get(name);\n};\n\nfunction FetchTransport() {}\n\n_c6 = FetchTransport;\n\nFetchTransport.prototype.open = function (xhr, onStartCallback, onProgressCallback, onFinishCallback, url, withCredentials, headers2) {\n  var controller = new AbortController1();\n  var signal = controller.signal // see #120\n  ;\n  var textDecoder = new TextDecoder1();\n  fetch(url, {\n    headers: headers2,\n    credentials: withCredentials ? 'include' : 'same-origin',\n    signal: signal,\n    cache: 'no-store'\n  }).then(function (response) {\n    var reader = response.body.getReader();\n    onStartCallback(response.status, response.statusText, response.headers.get('Content-Type'), new HeadersWrapper(response.headers), function () {\n      controller.abort();\n      reader.cancel();\n    });\n    return new Promise(function (resolve, reject) {\n      var readNextChunk = function () {\n        reader.read().then(function (result) {\n          if (result.done) {\n            // Note: bytes in textDecoder are ignored\n            resolve(undefined);\n          } else {\n            var chunk = textDecoder.decode(result.value, {\n              stream: true\n            });\n            onProgressCallback(chunk);\n            readNextChunk();\n          }\n        })['catch'](function (error) {\n          reject(error);\n        });\n      };\n\n      readNextChunk();\n    });\n  }).then(function (result) {\n    onFinishCallback();\n    return result;\n  }, function (error) {\n    onFinishCallback();\n    return Promise.reject(error);\n  });\n};\n\nfunction EventTarget1() {\n  this._listeners = Object.create(null);\n}\n\n_c7 = EventTarget1;\n\nfunction throwError(e) {\n  setTimeout(function () {\n    throw e;\n  }, 0);\n}\n\nEventTarget1.prototype.dispatchEvent = function (event) {\n  event.target = this;\n  var typeListeners = this._listeners[event.type];\n\n  if (typeListeners != undefined) {\n    var length = typeListeners.length;\n\n    for (var i = 0; i < length; i += 1) {\n      var listener = typeListeners[i];\n\n      try {\n        if (typeof listener.handleEvent === 'function') {\n          listener.handleEvent(event);\n        } else {\n          listener.call(this, event);\n        }\n      } catch (e) {\n        throwError(e);\n      }\n    }\n  }\n};\n\nEventTarget1.prototype.addEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners == undefined) {\n    typeListeners = [];\n    listeners[type] = typeListeners;\n  }\n\n  var found = false;\n\n  for (var i = 0; i < typeListeners.length; i += 1) {\n    if (typeListeners[i] === listener) {\n      found = true;\n    }\n  }\n\n  if (!found) {\n    typeListeners.push(listener);\n  }\n};\n\nEventTarget1.prototype.removeEventListener = function (type, listener) {\n  type = String(type);\n  var listeners = this._listeners;\n  var typeListeners = listeners[type];\n\n  if (typeListeners != undefined) {\n    var filtered = [];\n\n    for (var i = 0; i < typeListeners.length; i += 1) {\n      if (typeListeners[i] !== listener) {\n        filtered.push(typeListeners[i]);\n      }\n    }\n\n    if (filtered.length === 0) {\n      delete listeners[type];\n    } else {\n      listeners[type] = filtered;\n    }\n  }\n};\n\nfunction Event1(type) {\n  this.type = type;\n  this.target = undefined;\n}\n\n_c8 = Event1;\n\nfunction MessageEvent1(type, options) {\n  Event1.call(this, type);\n  this.data = options.data;\n  this.lastEventId = options.lastEventId;\n}\n\n_c9 = MessageEvent1;\nMessageEvent1.prototype = Object.create(Event1.prototype);\n\nfunction ConnectionEvent(type, options) {\n  Event1.call(this, type);\n  this.status = options.status;\n  this.statusText = options.statusText;\n  this.headers = options.headers;\n}\n\n_c10 = ConnectionEvent;\nConnectionEvent.prototype = Object.create(Event1.prototype);\nvar WAITING = -1;\nvar CONNECTING = 0;\nvar OPEN = 1;\nvar CLOSED = 2;\nvar AFTER_CR = -1;\nvar FIELD_START = 0;\nvar FIELD = 1;\nvar VALUE_START = 2;\nvar VALUE = 3;\nvar contentTypeRegExp = /^text\\/event\\-stream;?(\\s*charset\\=utf\\-8)?$/i;\nvar MINIMUM_DURATION = 1000;\nvar MAXIMUM_DURATION = 18000000;\n\nvar parseDuration = function (value, def) {\n  var n = parseInt(value, 10);\n\n  if (n !== n) {\n    n = def;\n  }\n\n  return clampDuration(n);\n};\n\nvar clampDuration = function (n) {\n  return Math.min(Math.max(n, MINIMUM_DURATION), MAXIMUM_DURATION);\n};\n\nvar fire = function (that, f, event) {\n  try {\n    if (typeof f === 'function') {\n      f.call(that, event);\n    }\n  } catch (e) {\n    throwError(e);\n  }\n};\n\nfunction EventSourcePolyfill(url, options) {\n  EventTarget1.call(this);\n  this.onopen = undefined;\n  this.onmessage = undefined;\n  this.onerror = undefined;\n  this.url = undefined;\n  this.readyState = undefined;\n  this.withCredentials = undefined;\n  this._close = undefined;\n  start(this, url, options);\n}\n\n_c11 = EventSourcePolyfill;\nvar isFetchSupported = fetch != undefined && Response1 != undefined && 'body' in Response1.prototype;\n\nfunction start(es, url, options) {\n  url = String(url);\n  var withCredentials = options != undefined && Boolean(options.withCredentials);\n  var initialRetry = clampDuration(1000);\n  var heartbeatTimeout = options != undefined && options.heartbeatTimeout != undefined ? parseDuration(options.heartbeatTimeout, 45000) : clampDuration(45000);\n  var lastEventId = '';\n  var retry = initialRetry;\n  var wasActivity = false;\n  var headers2 = options != undefined && options.headers != undefined ? JSON.parse(JSON.stringify(options.headers)) : undefined;\n  var CurrentTransport = options != undefined && options.Transport != undefined ? options.Transport : XMLHttpRequest;\n  var xhr = isFetchSupported && !(options != undefined && options.Transport != undefined) ? undefined : new XHRWrapper(new CurrentTransport());\n  var transport = xhr == undefined ? new FetchTransport() : new XHRTransport();\n  var cancelFunction = undefined;\n  var timeout = 0;\n  var currentState = WAITING;\n  var dataBuffer = '';\n  var lastEventIdBuffer = '';\n  var eventTypeBuffer = '';\n  var textBuffer = '';\n  var state = FIELD_START;\n  var fieldStart = 0;\n  var valueStart = 0;\n\n  var onStart = function (status, statusText, contentType, headers3, cancel) {\n    if (currentState === CONNECTING) {\n      cancelFunction = cancel;\n\n      if (status === 200 && contentType != undefined && contentTypeRegExp.test(contentType)) {\n        currentState = OPEN;\n        wasActivity = true;\n        retry = initialRetry;\n        es.readyState = OPEN;\n        var event = new ConnectionEvent('open', {\n          status: status,\n          statusText: statusText,\n          headers: headers3\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onopen, event);\n      } else {\n        var message = '';\n\n        if (status !== 200) {\n          if (statusText) {\n            statusText = statusText.replace(/\\s+/g, ' ');\n          }\n\n          message = \"EventSource's response has a status \" + status + ' ' + statusText + ' that is not 200. Aborting the connection.';\n        } else {\n          message = \"EventSource's response has a Content-Type specifying an unsupported type: \" + (contentType == undefined ? '-' : contentType.replace(/\\s+/g, ' ')) + '. Aborting the connection.';\n        }\n\n        throwError(new Error(message));\n        close();\n        var event = new ConnectionEvent('error', {\n          status: status,\n          statusText: statusText,\n          headers: headers3\n        });\n        es.dispatchEvent(event);\n        fire(es, es.onerror, event);\n      }\n    }\n  };\n\n  var onProgress = function (textChunk) {\n    if (currentState === OPEN) {\n      var n = -1;\n\n      for (var i = 0; i < textChunk.length; i += 1) {\n        var c = textChunk.charCodeAt(i);\n\n        if (c === '\\n'.charCodeAt(0) || c === '\\r'.charCodeAt(0)) {\n          n = i;\n        }\n      }\n\n      var chunk = (n !== -1 ? textBuffer : '') + textChunk.slice(0, n + 1);\n      textBuffer = (n === -1 ? textBuffer : '') + textChunk.slice(n + 1);\n\n      if (chunk !== '') {\n        wasActivity = true;\n      }\n\n      for (var position = 0; position < chunk.length; position += 1) {\n        var c = chunk.charCodeAt(position);\n\n        if (state === AFTER_CR && c === '\\n'.charCodeAt(0)) {\n          state = FIELD_START;\n        } else {\n          if (state === AFTER_CR) {\n            state = FIELD_START;\n          }\n\n          if (c === '\\r'.charCodeAt(0) || c === '\\n'.charCodeAt(0)) {\n            if (state !== FIELD_START) {\n              if (state === FIELD) {\n                valueStart = position + 1;\n              }\n\n              var field = chunk.slice(fieldStart, valueStart - 1);\n              var value = chunk.slice(valueStart + (valueStart < position && chunk.charCodeAt(valueStart) === ' '.charCodeAt(0) ? 1 : 0), position);\n\n              if (field === 'data') {\n                dataBuffer += '\\n';\n                dataBuffer += value;\n              } else if (field === 'id') {\n                lastEventIdBuffer = value;\n              } else if (field === 'event') {\n                eventTypeBuffer = value;\n              } else if (field === 'retry') {\n                initialRetry = parseDuration(value, initialRetry);\n                retry = initialRetry;\n              } else if (field === 'heartbeatTimeout') {\n                heartbeatTimeout = parseDuration(value, heartbeatTimeout);\n\n                if (timeout !== 0) {\n                  clearTimeout(timeout);\n                  timeout = setTimeout(function () {\n                    onTimeout();\n                  }, heartbeatTimeout);\n                }\n              }\n            }\n\n            if (state === FIELD_START) {\n              if (dataBuffer !== '') {\n                lastEventId = lastEventIdBuffer;\n\n                if (eventTypeBuffer === '') {\n                  eventTypeBuffer = 'message';\n                }\n\n                var event = new MessageEvent1(eventTypeBuffer, {\n                  data: dataBuffer.slice(1),\n                  lastEventId: lastEventIdBuffer\n                });\n                es.dispatchEvent(event);\n\n                if (eventTypeBuffer === 'message') {\n                  fire(es, es.onmessage, event);\n                }\n\n                if (currentState === CLOSED) {\n                  return;\n                }\n              }\n\n              dataBuffer = '';\n              eventTypeBuffer = '';\n            }\n\n            state = c === '\\r'.charCodeAt(0) ? AFTER_CR : FIELD_START;\n          } else {\n            if (state === FIELD_START) {\n              fieldStart = position;\n              state = FIELD;\n            }\n\n            if (state === FIELD) {\n              if (c === ':'.charCodeAt(0)) {\n                valueStart = position + 1;\n                state = VALUE_START;\n              }\n            } else if (state === VALUE_START) {\n              state = VALUE;\n            }\n          }\n        }\n      }\n    }\n  };\n\n  var onFinish = function () {\n    if (currentState === OPEN || currentState === CONNECTING) {\n      currentState = WAITING;\n\n      if (timeout !== 0) {\n        clearTimeout(timeout);\n        timeout = 0;\n      }\n\n      timeout = setTimeout(function () {\n        onTimeout();\n      }, retry);\n      retry = clampDuration(Math.min(initialRetry * 16, retry * 2));\n      es.readyState = CONNECTING;\n      var event = new Event1('error');\n      es.dispatchEvent(event);\n      fire(es, es.onerror, event);\n    }\n  };\n\n  var close = function () {\n    currentState = CLOSED;\n\n    if (cancelFunction != undefined) {\n      cancelFunction();\n      cancelFunction = undefined;\n    }\n\n    if (timeout !== 0) {\n      clearTimeout(timeout);\n      timeout = 0;\n    }\n\n    es.readyState = CLOSED;\n  };\n\n  var onTimeout = function () {\n    timeout = 0;\n\n    if (currentState !== WAITING) {\n      if (!wasActivity && cancelFunction != undefined) {\n        throwError(new Error('No activity within ' + heartbeatTimeout + ' milliseconds. Reconnecting.'));\n        cancelFunction();\n        cancelFunction = undefined;\n      } else {\n        wasActivity = false;\n        timeout = setTimeout(function () {\n          onTimeout();\n        }, heartbeatTimeout);\n      }\n\n      return;\n    }\n\n    wasActivity = false;\n    timeout = setTimeout(function () {\n      onTimeout();\n    }, heartbeatTimeout);\n    currentState = CONNECTING;\n    dataBuffer = '';\n    eventTypeBuffer = '';\n    lastEventIdBuffer = lastEventId;\n    textBuffer = '';\n    fieldStart = 0;\n    valueStart = 0;\n    state = FIELD_START; // https://bugzilla.mozilla.org/show_bug.cgi?id=428916\n    // Request header field Last-Event-ID is not allowed by Access-Control-Allow-Headers.\n\n    var requestURL = url;\n\n    if (url.slice(0, 5) !== 'data:' && url.slice(0, 5) !== 'blob:') {\n      if (lastEventId !== '') {\n        requestURL += (url.indexOf('?') === -1 ? '?' : '&') + 'lastEventId=' + encodeURIComponent(lastEventId);\n      }\n    }\n\n    var requestHeaders = {};\n    requestHeaders['Accept'] = 'text/event-stream';\n\n    if (headers2 != undefined) {\n      for (var name in headers2) {\n        if (Object.prototype.hasOwnProperty.call(headers2, name)) {\n          requestHeaders[name] = headers2[name];\n        }\n      }\n    }\n\n    try {\n      transport.open(xhr, onStart, onProgress, onFinish, requestURL, withCredentials, requestHeaders);\n    } catch (error) {\n      close();\n      throw error;\n    }\n  };\n\n  es.url = url;\n  es.readyState = CONNECTING;\n  es.withCredentials = withCredentials;\n  es._close = close;\n  onTimeout();\n}\n\nEventSourcePolyfill.prototype = Object.create(EventTarget1.prototype);\nEventSourcePolyfill.prototype.CONNECTING = CONNECTING;\nEventSourcePolyfill.prototype.OPEN = OPEN;\nEventSourcePolyfill.prototype.CLOSED = CLOSED;\n\nEventSourcePolyfill.prototype.close = function () {\n  this._close();\n};\n\nEventSourcePolyfill.CONNECTING = CONNECTING;\nEventSourcePolyfill.OPEN = OPEN;\nEventSourcePolyfill.CLOSED = CLOSED;\nEventSourcePolyfill.prototype.withCredentials = undefined;\nvar _default = EventSourcePolyfill;\nexports.default = _default;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"TextDecoderPolyfill\");\n$RefreshReg$(_c2, \"XHRWrapper\");\n$RefreshReg$(_c3, \"HeadersPolyfill\");\n$RefreshReg$(_c4, \"XHRTransport\");\n$RefreshReg$(_c5, \"HeadersWrapper\");\n$RefreshReg$(_c6, \"FetchTransport\");\n$RefreshReg$(_c7, \"EventTarget1\");\n$RefreshReg$(_c8, \"Event1\");\n$RefreshReg$(_c9, \"MessageEvent1\");\n$RefreshReg$(_c10, \"ConnectionEvent\");\n$RefreshReg$(_c11, \"EventSourcePolyfill\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../node_modules/next/dist/client/dev/event-source-polyfill.js\n");

/***/ }),

/***/ "../node_modules/next/dist/client/dev/fouc.js":
/*!****************************************************!*\
  !*** ../node_modules/next/dist/client/dev/fouc.js ***!
  \****************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.displayContent = displayContent;\n\nfunction displayContent(callback) {\n  (window.requestAnimationFrame || setTimeout)(function () {\n    for (var x = document.querySelectorAll('[data-next-hide-fouc]'), i = x.length; i--;) {\n      x[i].parentNode.removeChild(x[i]);\n    }\n\n    if (callback) {\n      callback();\n    }\n  });\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L2ZvdWMuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFhOztBQUNiQSw4Q0FBNkM7QUFDekNHLEVBQUFBLEtBQUssRUFBRTtBQURrQyxDQUE3QztBQUdBRCxzQkFBQSxHQUF5QkUsY0FBekI7O0FBQ0EsU0FBU0EsY0FBVCxDQUF3QkMsUUFBeEIsRUFBa0M7QUFDOUIsR0FBQ0MsTUFBTSxDQUFDQyxxQkFBUCxJQUFnQ0MsVUFBakMsRUFBNkMsWUFBVztBQUNwRCxTQUFJLElBQUlDLENBQUMsR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQix1QkFBMUIsQ0FBUixFQUE0REMsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLE1BQXRFLEVBQThFRCxDQUFDLEVBQS9FLEdBQW1GO0FBQy9FSCxNQUFBQSxDQUFDLENBQUNHLENBQUQsQ0FBRCxDQUFLRSxVQUFMLENBQWdCQyxXQUFoQixDQUE0Qk4sQ0FBQyxDQUFDRyxDQUFELENBQTdCO0FBQ0g7O0FBQ0QsUUFBSVAsUUFBSixFQUFjO0FBQ1ZBLE1BQUFBLFFBQVE7QUFDWDtBQUNKLEdBUEQ7QUFRSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L2ZvdWMuanM/ZGI1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGlzcGxheUNvbnRlbnQgPSBkaXNwbGF5Q29udGVudDtcbmZ1bmN0aW9uIGRpc3BsYXlDb250ZW50KGNhbGxiYWNrKSB7XG4gICAgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgc2V0VGltZW91dCkoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvcih2YXIgeCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLW5leHQtaGlkZS1mb3VjXScpLCBpID0geC5sZW5ndGg7IGktLTspe1xuICAgICAgICAgICAgeFtpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHhbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VjLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRpc3BsYXlDb250ZW50IiwiY2FsbGJhY2siLCJ3aW5kb3ciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwieCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJsZW5ndGgiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../node_modules/next/dist/client/dev/fouc.js\n");

/***/ }),

/***/ "../node_modules/next/dist/client/dev/on-demand-entries-utils.js":
/*!***********************************************************************!*\
  !*** ../node_modules/next/dist/client/dev/on-demand-entries-utils.js ***!
  \***********************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.closePing = closePing;\nexports.setupPing = setupPing;\nexports.currentPage = void 0;\n\nvar _eventsource = __webpack_require__(/*! ./error-overlay/eventsource */ \"../node_modules/next/dist/client/dev/error-overlay/eventsource.js\");\n\nlet evtSource;\nlet currentPage;\nexports.currentPage = currentPage;\n\nfunction closePing() {\n  if (evtSource) evtSource.close();\n  evtSource = null;\n}\n\nfunction setupPing(assetPrefix, pathnameFn, retry) {\n  const pathname = pathnameFn(); // Make sure to only create new EventSource request if page has changed\n\n  if (pathname === currentPage && !retry) return;\n  exports.currentPage = currentPage = pathname; // close current EventSource connection\n\n  closePing();\n  evtSource = (0, _eventsource).getEventSourceWrapper({\n    path: `${assetPrefix}/_next/webpack-hmr?page=${currentPage}`,\n    timeout: 5000\n  });\n  evtSource.addMessageListener(event => {\n    if (event.data.indexOf('{') === -1) return;\n\n    try {\n      const payload = JSON.parse(event.data);\n\n      if (payload.invalid) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin'\n        }).then(pageRes => {\n          if (pageRes.status === 200) {\n            location.reload();\n          }\n        });\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err);\n    }\n  });\n}\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L29uLWRlbWFuZC1lbnRyaWVzLXV0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBYTs7QUFDYkEsOENBQTZDO0FBQ3pDRyxFQUFBQSxLQUFLLEVBQUU7QUFEa0MsQ0FBN0M7QUFHQUQsaUJBQUEsR0FBb0JFLFNBQXBCO0FBQ0FGLGlCQUFBLEdBQW9CRyxTQUFwQjtBQUNBSCxtQkFBQSxHQUFzQixLQUFLLENBQTNCOztBQUNBLElBQUlLLFlBQVksR0FBR0MsbUJBQU8sQ0FBQyxzR0FBRCxDQUExQjs7QUFDQSxJQUFJQyxTQUFKO0FBQ0EsSUFBSUgsV0FBSjtBQUNBSixtQkFBQSxHQUFzQkksV0FBdEI7O0FBQ0EsU0FBU0YsU0FBVCxHQUFxQjtBQUNqQixNQUFJSyxTQUFKLEVBQWVBLFNBQVMsQ0FBQ0MsS0FBVjtBQUNmRCxFQUFBQSxTQUFTLEdBQUcsSUFBWjtBQUNIOztBQUNELFNBQVNKLFNBQVQsQ0FBbUJNLFdBQW5CLEVBQWdDQyxVQUFoQyxFQUE0Q0MsS0FBNUMsRUFBbUQ7QUFDL0MsUUFBTUMsUUFBUSxHQUFHRixVQUFVLEVBQTNCLENBRCtDLENBRS9DOztBQUNBLE1BQUlFLFFBQVEsS0FBS1IsV0FBYixJQUE0QixDQUFDTyxLQUFqQyxFQUF3QztBQUN4Q1gsRUFBQUEsbUJBQUEsR0FBc0JJLFdBQVcsR0FBR1EsUUFBcEMsQ0FKK0MsQ0FLL0M7O0FBQ0FWLEVBQUFBLFNBQVM7QUFDVEssRUFBQUEsU0FBUyxHQUFHLENBQUMsR0FBR0YsWUFBSixFQUFrQlEscUJBQWxCLENBQXdDO0FBQ2hEQyxJQUFBQSxJQUFJLEVBQUcsR0FBRUwsV0FBWSwyQkFBMEJMLFdBQVksRUFEWDtBQUVoRFcsSUFBQUEsT0FBTyxFQUFFO0FBRnVDLEdBQXhDLENBQVo7QUFJQVIsRUFBQUEsU0FBUyxDQUFDUyxrQkFBVixDQUE4QkMsS0FBRCxJQUFTO0FBQ2xDLFFBQUlBLEtBQUssQ0FBQ0MsSUFBTixDQUFXQyxPQUFYLENBQW1CLEdBQW5CLE1BQTRCLENBQUMsQ0FBakMsRUFBb0M7O0FBQ3BDLFFBQUk7QUFDQSxZQUFNQyxPQUFPLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXTCxLQUFLLENBQUNDLElBQWpCLENBQWhCOztBQUNBLFVBQUlFLE9BQU8sQ0FBQ0csT0FBWixFQUFxQjtBQUNqQjtBQUNBO0FBQ0FDLFFBQUFBLEtBQUssQ0FBQ0MsUUFBUSxDQUFDQyxJQUFWLEVBQWdCO0FBQ2pCQyxVQUFBQSxXQUFXLEVBQUU7QUFESSxTQUFoQixDQUFMLENBRUdDLElBRkgsQ0FFU0MsT0FBRCxJQUFXO0FBQ2YsY0FBSUEsT0FBTyxDQUFDQyxNQUFSLEtBQW1CLEdBQXZCLEVBQTRCO0FBQ3hCTCxZQUFBQSxRQUFRLENBQUNNLE1BQVQ7QUFDSDtBQUNKLFNBTkQ7QUFPSDtBQUNKLEtBYkQsQ0FhRSxPQUFPQyxHQUFQLEVBQVk7QUFDVkMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsNENBQWQsRUFBNERGLEdBQTVEO0FBQ0g7QUFDSixHQWxCRDtBQW1CSCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvZGV2L29uLWRlbWFuZC1lbnRyaWVzLXV0aWxzLmpzP2NjZjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNsb3NlUGluZyA9IGNsb3NlUGluZztcbmV4cG9ydHMuc2V0dXBQaW5nID0gc2V0dXBQaW5nO1xuZXhwb3J0cy5jdXJyZW50UGFnZSA9IHZvaWQgMDtcbnZhciBfZXZlbnRzb3VyY2UgPSByZXF1aXJlKFwiLi9lcnJvci1vdmVybGF5L2V2ZW50c291cmNlXCIpO1xubGV0IGV2dFNvdXJjZTtcbmxldCBjdXJyZW50UGFnZTtcbmV4cG9ydHMuY3VycmVudFBhZ2UgPSBjdXJyZW50UGFnZTtcbmZ1bmN0aW9uIGNsb3NlUGluZygpIHtcbiAgICBpZiAoZXZ0U291cmNlKSBldnRTb3VyY2UuY2xvc2UoKTtcbiAgICBldnRTb3VyY2UgPSBudWxsO1xufVxuZnVuY3Rpb24gc2V0dXBQaW5nKGFzc2V0UHJlZml4LCBwYXRobmFtZUZuLCByZXRyeSkge1xuICAgIGNvbnN0IHBhdGhuYW1lID0gcGF0aG5hbWVGbigpO1xuICAgIC8vIE1ha2Ugc3VyZSB0byBvbmx5IGNyZWF0ZSBuZXcgRXZlbnRTb3VyY2UgcmVxdWVzdCBpZiBwYWdlIGhhcyBjaGFuZ2VkXG4gICAgaWYgKHBhdGhuYW1lID09PSBjdXJyZW50UGFnZSAmJiAhcmV0cnkpIHJldHVybjtcbiAgICBleHBvcnRzLmN1cnJlbnRQYWdlID0gY3VycmVudFBhZ2UgPSBwYXRobmFtZTtcbiAgICAvLyBjbG9zZSBjdXJyZW50IEV2ZW50U291cmNlIGNvbm5lY3Rpb25cbiAgICBjbG9zZVBpbmcoKTtcbiAgICBldnRTb3VyY2UgPSAoMCwgX2V2ZW50c291cmNlKS5nZXRFdmVudFNvdXJjZVdyYXBwZXIoe1xuICAgICAgICBwYXRoOiBgJHthc3NldFByZWZpeH0vX25leHQvd2VicGFjay1obXI/cGFnZT0ke2N1cnJlbnRQYWdlfWAsXG4gICAgICAgIHRpbWVvdXQ6IDUwMDBcbiAgICB9KTtcbiAgICBldnRTb3VyY2UuYWRkTWVzc2FnZUxpc3RlbmVyKChldmVudCk9PntcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEuaW5kZXhPZigneycpID09PSAtMSkgcmV0dXJuO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoZXZlbnQuZGF0YSk7XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pbnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgLy8gUGF5bG9hZCBjYW4gYmUgaW52YWxpZCBldmVuIGlmIHRoZSBwYWdlIGRvZXMgbm90IGV4aXN0LlxuICAgICAgICAgICAgICAgIC8vIFNvLCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSBpdCBleGlzdHMgYmVmb3JlIHJlbG9hZGluZy5cbiAgICAgICAgICAgICAgICBmZXRjaChsb2NhdGlvbi5ocmVmLCB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nXG4gICAgICAgICAgICAgICAgfSkudGhlbigocGFnZVJlcyk9PntcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBhZ2VSZXMuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignb24tZGVtYW5kLWVudHJpZXMgZmFpbGVkIHRvIHBhcnNlIHJlc3BvbnNlJywgZXJyKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbi1kZW1hbmQtZW50cmllcy11dGlscy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJjbG9zZVBpbmciLCJzZXR1cFBpbmciLCJjdXJyZW50UGFnZSIsIl9ldmVudHNvdXJjZSIsInJlcXVpcmUiLCJldnRTb3VyY2UiLCJjbG9zZSIsImFzc2V0UHJlZml4IiwicGF0aG5hbWVGbiIsInJldHJ5IiwicGF0aG5hbWUiLCJnZXRFdmVudFNvdXJjZVdyYXBwZXIiLCJwYXRoIiwidGltZW91dCIsImFkZE1lc3NhZ2VMaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsImluZGV4T2YiLCJwYXlsb2FkIiwiSlNPTiIsInBhcnNlIiwiaW52YWxpZCIsImZldGNoIiwibG9jYXRpb24iLCJocmVmIiwiY3JlZGVudGlhbHMiLCJ0aGVuIiwicGFnZVJlcyIsInN0YXR1cyIsInJlbG9hZCIsImVyciIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../node_modules/next/dist/client/dev/on-demand-entries-utils.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ var __webpack_exports__ = (__webpack_exec__("../node_modules/next/dist/client/dev/amp-dev.js"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);